<?php

namespace AppBundle\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('id' => 'DESC'));
    }

    public function search($em, $term) {

        $query = $em->createQuery("SELECT p FROM AppBundle:Post p WHERE p.title like :term")
            ->setParameter('term', '%'.$term.'%');

        return $query->getResult();
    }

    public function incViews($em, $id) {

        $selectQuery = $em->createQuery('SELECT p.views FROM AppBundle:Post p WHERE p.id = :id')
                            ->setParameter('id', $id);
        $views = $selectQuery->getScalarResult();
        $views = (int)$views[0]['views'];

        $updateQuery = $em->createQuery(
            'UPDATE AppBundle:Post p SET p.views = :views WHERE p.id = :id'
        );
        $updateQuery->setParameter(':views', ++$views);
        $updateQuery->setParameter(':id', $id);
        return $updateQuery->execute();

    }

    /**
     * Get the top 4 most viewed items
     */
    public function getViews($em) {
        $selectQuery = $em->createQuery("SELECT p.views as views FROM AppBundle:Post p ORDER BY views;")
                          ->setMaxResults(1);

        return $selectQuery->getScalarResult();
    }

    /**
     * Get the items
     *
     * @param $em
     * @param $item
     * @param $category
     * @param $city
     * @return mixed
     */
    public function searchForItems ($em, $item, $category, $city) {
        $selectQuery = $em->createQuery(
            'SELECT p from AppBundle:Post p WHERE p.title like :item
             AND p.category_id = :category 
             AND p.city_id = :city'
        )->setParameter(':item', '%' . $item . '%')
            ->setParameter(':category', $category)
            ->setParameter(':city', $city);

        return $selectQuery->getResult();
    }

    /**
     * Get only the active posts
     *
     * @return mixed
     */
    public function findActivePosts () {
        return $this->findBy([
            'isActive' => 1
        ], ['id' => 'DESC']);
    }

}
